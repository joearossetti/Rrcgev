// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// DemandInvertTrust_Logit__new
RcppExport SEXP DemandInvertTrust_Logit__new(Eigen::VectorXd delta_init, Eigen::VectorXd s_0, Eigen::MatrixXd mu_, double u_opt_out_, double max_radius, Eigen::VectorXd thresh, Eigen::VectorXd scale, double tol, int max_count);
RcppExport SEXP _Rrcgev_DemandInvertTrust_Logit__new(SEXP delta_initSEXP, SEXP s_0SEXP, SEXP mu_SEXP, SEXP u_opt_out_SEXP, SEXP max_radiusSEXP, SEXP threshSEXP, SEXP scaleSEXP, SEXP tolSEXP, SEXP max_countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type delta_init(delta_initSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type s_0(s_0SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type mu_(mu_SEXP);
    Rcpp::traits::input_parameter< double >::type u_opt_out_(u_opt_out_SEXP);
    Rcpp::traits::input_parameter< double >::type max_radius(max_radiusSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type max_count(max_countSEXP);
    rcpp_result_gen = Rcpp::wrap(DemandInvertTrust_Logit__new(delta_init, s_0, mu_, u_opt_out_, max_radius, thresh, scale, tol, max_count));
    return rcpp_result_gen;
END_RCPP
}
// DemandInvertTrust_Logit__root_cauchy
RcppExport SEXP DemandInvertTrust_Logit__root_cauchy(SEXP xp);
RcppExport SEXP _Rrcgev_DemandInvertTrust_Logit__root_cauchy(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(DemandInvertTrust_Logit__root_cauchy(xp));
    return rcpp_result_gen;
END_RCPP
}
// DemandLogit__new
RcppExport SEXP DemandLogit__new(Eigen::MatrixXd mu_, double u_opt_out_);
RcppExport SEXP _Rrcgev_DemandLogit__new(SEXP mu_SEXP, SEXP u_opt_out_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type mu_(mu_SEXP);
    Rcpp::traits::input_parameter< double >::type u_opt_out_(u_opt_out_SEXP);
    rcpp_result_gen = Rcpp::wrap(DemandLogit__new(mu_, u_opt_out_));
    return rcpp_result_gen;
END_RCPP
}
// DemandLogit__compute
RcppExport SEXP DemandLogit__compute(SEXP xp, Eigen::VectorXd delta_);
RcppExport SEXP _Rrcgev_DemandLogit__compute(SEXP xpSEXP, SEXP delta_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type delta_(delta_SEXP);
    rcpp_result_gen = Rcpp::wrap(DemandLogit__compute(xp, delta_));
    return rcpp_result_gen;
END_RCPP
}
// DemandLogit__getShares
RcppExport SEXP DemandLogit__getShares(SEXP xp);
RcppExport SEXP _Rrcgev_DemandLogit__getShares(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(DemandLogit__getShares(xp));
    return rcpp_result_gen;
END_RCPP
}
// DemandLogit__getIncValue
RcppExport SEXP DemandLogit__getIncValue(SEXP xp);
RcppExport SEXP _Rrcgev_DemandLogit__getIncValue(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(DemandLogit__getIncValue(xp));
    return rcpp_result_gen;
END_RCPP
}
// DemandLogitRoot__new
RcppExport SEXP DemandLogitRoot__new(Eigen::VectorXd s_0, Eigen::MatrixXd mu_, double u_opt_out_);
RcppExport SEXP _Rrcgev_DemandLogitRoot__new(SEXP s_0SEXP, SEXP mu_SEXP, SEXP u_opt_out_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type s_0(s_0SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type mu_(mu_SEXP);
    Rcpp::traits::input_parameter< double >::type u_opt_out_(u_opt_out_SEXP);
    rcpp_result_gen = Rcpp::wrap(DemandLogitRoot__new(s_0, mu_, u_opt_out_));
    return rcpp_result_gen;
END_RCPP
}
// DemandLogitRoot__compute_obj
RcppExport SEXP DemandLogitRoot__compute_obj(SEXP xp, Eigen::VectorXd delta_);
RcppExport SEXP _Rrcgev_DemandLogitRoot__compute_obj(SEXP xpSEXP, SEXP delta_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type delta_(delta_SEXP);
    rcpp_result_gen = Rcpp::wrap(DemandLogitRoot__compute_obj(xp, delta_));
    return rcpp_result_gen;
END_RCPP
}
// DemandLogitRoot__getValue
RcppExport SEXP DemandLogitRoot__getValue(SEXP xp);
RcppExport SEXP _Rrcgev_DemandLogitRoot__getValue(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(DemandLogitRoot__getValue(xp));
    return rcpp_result_gen;
END_RCPP
}
// DemandLogitRoot__getGradient
RcppExport SEXP DemandLogitRoot__getGradient(SEXP xp);
RcppExport SEXP _Rrcgev_DemandLogitRoot__getGradient(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(DemandLogitRoot__getGradient(xp));
    return rcpp_result_gen;
END_RCPP
}
// DemandLogitRoot__getHessian
RcppExport SEXP DemandLogitRoot__getHessian(SEXP xp);
RcppExport SEXP _Rrcgev_DemandLogitRoot__getHessian(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(DemandLogitRoot__getHessian(xp));
    return rcpp_result_gen;
END_RCPP
}
// UnobsvHetero__new
RcppExport SEXP UnobsvHetero__new(Rcpp::NumericMatrix rand_mat_, Rcpp::LogicalVector which_nln_parmtrs_, int num_draws_, int dim_sigma_);
RcppExport SEXP _Rrcgev_UnobsvHetero__new(SEXP rand_mat_SEXP, SEXP which_nln_parmtrs_SEXP, SEXP num_draws_SEXP, SEXP dim_sigma_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type rand_mat_(rand_mat_SEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type which_nln_parmtrs_(which_nln_parmtrs_SEXP);
    Rcpp::traits::input_parameter< int >::type num_draws_(num_draws_SEXP);
    Rcpp::traits::input_parameter< int >::type dim_sigma_(dim_sigma_SEXP);
    rcpp_result_gen = Rcpp::wrap(UnobsvHetero__new(rand_mat_, which_nln_parmtrs_, num_draws_, dim_sigma_));
    return rcpp_result_gen;
END_RCPP
}
// UnobsvHetero__getNln_parmtrs_mat
RcppExport SEXP UnobsvHetero__getNln_parmtrs_mat(SEXP xp, Rcpp::NumericVector short_pars_vec_);
RcppExport SEXP _Rrcgev_UnobsvHetero__getNln_parmtrs_mat(SEXP xpSEXP, SEXP short_pars_vec_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type short_pars_vec_(short_pars_vec_SEXP);
    rcpp_result_gen = Rcpp::wrap(UnobsvHetero__getNln_parmtrs_mat(xp, short_pars_vec_));
    return rcpp_result_gen;
END_RCPP
}
// UnobsvHetero__getNui_mat
RcppExport SEXP UnobsvHetero__getNui_mat(SEXP xp, Eigen::MatrixXd sigma_mat_);
RcppExport SEXP _Rrcgev_UnobsvHetero__getNui_mat(SEXP xpSEXP, SEXP sigma_mat_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type sigma_mat_(sigma_mat_SEXP);
    rcpp_result_gen = Rcpp::wrap(UnobsvHetero__getNui_mat(xp, sigma_mat_));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Rrcgev_DemandInvertTrust_Logit__new", (DL_FUNC) &_Rrcgev_DemandInvertTrust_Logit__new, 9},
    {"_Rrcgev_DemandInvertTrust_Logit__root_cauchy", (DL_FUNC) &_Rrcgev_DemandInvertTrust_Logit__root_cauchy, 1},
    {"_Rrcgev_DemandLogit__new", (DL_FUNC) &_Rrcgev_DemandLogit__new, 2},
    {"_Rrcgev_DemandLogit__compute", (DL_FUNC) &_Rrcgev_DemandLogit__compute, 2},
    {"_Rrcgev_DemandLogit__getShares", (DL_FUNC) &_Rrcgev_DemandLogit__getShares, 1},
    {"_Rrcgev_DemandLogit__getIncValue", (DL_FUNC) &_Rrcgev_DemandLogit__getIncValue, 1},
    {"_Rrcgev_DemandLogitRoot__new", (DL_FUNC) &_Rrcgev_DemandLogitRoot__new, 3},
    {"_Rrcgev_DemandLogitRoot__compute_obj", (DL_FUNC) &_Rrcgev_DemandLogitRoot__compute_obj, 2},
    {"_Rrcgev_DemandLogitRoot__getValue", (DL_FUNC) &_Rrcgev_DemandLogitRoot__getValue, 1},
    {"_Rrcgev_DemandLogitRoot__getGradient", (DL_FUNC) &_Rrcgev_DemandLogitRoot__getGradient, 1},
    {"_Rrcgev_DemandLogitRoot__getHessian", (DL_FUNC) &_Rrcgev_DemandLogitRoot__getHessian, 1},
    {"_Rrcgev_UnobsvHetero__new", (DL_FUNC) &_Rrcgev_UnobsvHetero__new, 4},
    {"_Rrcgev_UnobsvHetero__getNln_parmtrs_mat", (DL_FUNC) &_Rrcgev_UnobsvHetero__getNln_parmtrs_mat, 2},
    {"_Rrcgev_UnobsvHetero__getNui_mat", (DL_FUNC) &_Rrcgev_UnobsvHetero__getNui_mat, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_Rrcgev(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
